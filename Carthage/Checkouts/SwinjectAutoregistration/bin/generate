#!/usr/bin/env xcrun swift

// Generates a Swift file with registration fuctions and other helper methods

import Foundation

let genericServices = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

let genericArgumentPrefix = "Arg"

let autoregistrationPath = "Sources/AutoRegistration.swift"
let checksPath = "Sources/CheckResolved.swift"
let resolverPath = "Sources/Resolver.swift"

func headers(_ fileName: String) -> String {
    return ["//",
    "//  \(fileName)",
    "//  SwinjectAutoregistration",
    "//",
    "//  Generated by Swinject AutoRegistration generator.",
    "//  Copyright © 2017 Swinject Contributors. All rights reserved.",
    "//"].joined(separator: "\n")
}

func registerComment(_ dependencies: Int, arguments: Int) -> String {
    let genericArguments = (1..<(arguments+1)).map{ "\(genericArgumentPrefix)\($0)" } // ["Arg1", "Arg2", "Arg3"]
    return [
        "/** Registers a factory that resolves the Service based on dependencies inferred from the Service initializer.",
        " ",
        " Usage: `autoregister(MyService.self\((arguments > 0) ? ", \(arguments == 1 ? "argument" : "arguments"): \(commaConcat(genericArguments.map{"\($0).self"}))" : "")), initializer: MyService.init`",
        " - Parameters:",
        "    - service: Registered service type",
        "    - name: Optional name of the service",
        (arguments > 0) ? "    - \(arguments == 1 ? "argument" : "arguments"): Argument type(s) that will be resolved dynamically instead of resolving dependency" : "",
        "    - initializer: Initializer of the registered service",
        " - Returns: The registered service entry \(arguments > 0 ? "with \(arguments) arguments" : "")",
        " - Important: Might fail if one of the dependencies is unresolvable.",
        " */"
    ].joined(separator: "\n")
}

extension Array {
    subscript(safe index: Int) -> Element? {
        return indices ~= index ? self[index] : nil
    }
}

func genericType(for position: Int) -> String {
    let max = genericServices.count
    var generic: String
    switch position {
    case _ where position < max: generic = genericServices[position % max]
    default: generic = genericServices[position / max - 1] + genericServices[position % max]
    }
    
    let toEscape = ["as", "in"]
    
    if toEscape.contains(generic.lowercased()) {
        generic = "`\(generic)`"
    }
    
    return generic
}


func commaConcat(_ xs: [String]) -> String {
    return xs.joined(separator: ", ")
}

func extraParentheses(_ string: String, when condition: Bool) -> String {
    return condition ? "(\(string))" : string
}

func registerGenerator(_ dependenciesCount: Int, argumentsCount: Int, breakIntoVariables: Bool = false) -> String {
    // If there is only one argument and one dependency, it can be checked by compiler
    let isArgumentInjection = dependenciesCount == 1 && argumentsCount == 1
    
    let argParameterName = argumentsCount == 1 ? "argument" : "arguments"
    
    var genericParameters = (0..<dependenciesCount).map(genericType) // ["A", "B", "C"]
    let genericArguments = (1..<(argumentsCount+1)).map{ "\(genericArgumentPrefix)\($0)" } // ["Arg1", "Arg2", "Arg3"]
    let genericArgumentsVars = genericArguments.map { $0.lowercased() } // ["arg1", "arg2", "arg3"]
    
    var resolvers = genericParameters.map { _ in "res.resolve(\( argumentsCount > 0 ? "\(argParameterName): \(commaConcat(genericArgumentsVars))" : ""))" }
    
    var genericsDefinition = commaConcat(["Service"] + genericParameters + genericArguments)
    
    if isArgumentInjection {
        genericParameters = ["\(genericArgumentPrefix)1"]
        genericsDefinition = commaConcat(["Service"] + genericParameters)
        resolvers = ["\(genericArgumentPrefix.lowercased())1"]
    }
    
    let concatenatedParameters = commaConcat(genericParameters)
    
    let argumentsDefinition = argumentsCount == 0 ? "" : ", \(argParameterName) \(commaConcat(genericArguments.enumerated().map{ "\($0 >= 1 ? "_" : "") \($1.lowercased()): \($1).Type" }))"
    
    let initializer: String
    
    if breakIntoVariables {
        let services = genericParameters.enumerated().map { "let \($1.lowercased()): \($1)? = \(resolvers[$0])" }
        initializer =
            "           " + services.joined(separator: "; ") + "\n" +
            "           checkResolved(initializer: initializer, services: \(commaConcat(genericParameters.map{$0.lowercased()})))\n" +
        "           return initializer(\(extraParentheses(commaConcat(genericParameters.map{ "\($0.lowercased())!" }), when: dependenciesCount != 1)))\n"
    } else {
        initializer = "       initializer(\(extraParentheses(commaConcat(resolvers.map{"\($0)\(isArgumentInjection ? "" : "!")"}), when: dependenciesCount != 1)))"
    }
    
    let closureParameters = commaConcat(["res"] + genericArgumentsVars)
    
    var register = [
        registerComment(dependenciesCount, arguments: argumentsCount),
        "@discardableResult",
        "func autoregister<\(genericsDefinition)>(_ service: Service.Type, name: String? = nil\(argumentsDefinition), initializer: @escaping (\(extraParentheses(concatenatedParameters, when: dependenciesCount != 1))) -> Service) -> ServiceEntry<Service> {",
    ]
    
    if argumentsCount > 1 {
        register += ["   precondition(hasUnique(arguments: [\(commaConcat(genericArgumentsVars))]), \"Autoregistration of service with dynamic arguments of the same type (\(commaConcat(genericArgumentsVars.map{ "\\(\($0))" }))) is not supported\")"]
    }
    
    register += [
        "   return self.register(service.self, name: name, factory: { \(closureParameters) in ",
        initializer,
        "   } as (\(commaConcat(["Resolver"] + genericArguments))) -> Service)",
        "}"
    ]

    return register.joined(separator: "\n")
}


func resolverGenerator(_ arguments: Int) -> String {
    
    let argParameterName = arguments == 1 ? "argument" : "arguments"
    
    let genericArguments = (1..<(arguments+1)).map{ "\(genericArgumentPrefix)\($0)" } // ["Arg1", "Arg2", "Arg3"]
    
    let genericsDefinition = commaConcat(["Service"] + genericArguments)
    
    let paramArgs = (1..<(arguments+1)).map { "\(genericArgumentPrefix.lowercased())\($0)" }
    
    let argumentsTests = paramArgs.map { "(\($0) as? Service) ?? " }.joined(separator: "")

    let argumentsDefinition = arguments == 0 ? "" : "\(argParameterName) \(commaConcat(genericArguments.enumerated().map{ "\($0 >= 1 ? "_" : "") \($1.lowercased()): \($1)" }))"


    let implementation = "return \(argumentsTests)self.resolve(Service.self)"
    
    let resolver = [
    "    func resolve<\(genericsDefinition)>(\(argumentsDefinition)) -> Service? {",
    "       \(implementation)",
    "    }"
    ]
    return resolver.joined(separator: "\n")
}

func checkGenerator(_ dependencies: Int) -> String {
    
    let genericParameters = (0..<dependencies).map(genericType) // ["A", "B", "C"]
    let generics = commaConcat(genericParameters)
    
    let servicesDefinition = dependencies == 0 ? "" : "\(commaConcat(genericParameters.enumerated().map{ "\($0 >= 1 ? "_" : "") \($1.lowercased()): \($1)?" }))"
    let recursiveUnresolvedCall = dependencies > 1 ? "unresolvedService(\(commaConcat(genericParameters.dropLast().map { $0.lowercased() }))) ?? " : ""
    let lowercasedServicesString = commaConcat(genericParameters.map{ $0.lowercased() })
    let maxGroupSize: Int = 10
    let serviceGroups: [[String]] = genericParameters.map{ $0.lowercased() }.enumerated().reduce([]){ accum, s in
        var accum = accum
        let (index, service) = s
        let groupIndex = Int(index/maxGroupSize)
        if groupIndex >= accum.count { accum.append([]) }
        accum[groupIndex].append(service)
        return accum
    }
    
    let serviceArrayString = serviceGroups.map { "[\(commaConcat($0))] as [Any?]"}.joined(separator: " + ")
    
    let check = [
    "func unresolvedService<\(generics)>(_\(servicesDefinition)) -> String? {",
    "   return \(recursiveUnresolvedCall)( \(genericParameters.last!.lowercased()) == nil ? \"\\(\(genericParameters.last!).self)\" : nil )",
    "}",
    "",
    "func checkResolved<Service, \(generics)>(initializer: (\(extraParentheses(generics, when: dependencies != 1))) -> Service, services\(servicesDefinition)){",
    "   let unresolved = ( \(serviceArrayString) ).filter { $0 == nil }",
    "   if unresolved.count > 0 {",
    "       let errorMessage = resolutionErrors(forInitializer: initializer).map { \"\\($0.message)\\n\" }.joined()",
    "       fatalError(\"SwinjectAutoregistration: Resolution failed.\\n\\(errorMessage)Unresolved service: \\(unresolvedService(\(lowercasedServicesString))!)\\nInitializer: (\(commaConcat(genericParameters.map{ "\\(\($0).self)" }))) -> \\(Service.self)\")",
    "   }",
    "}"
    ]
    
    return check.joined(separator: "\n")
}


func write(to outputPath: String, lines: [String]) throws{
    let output = ([
        headers(outputPath),
        "\n\nimport Swinject\n\n",
        ]
        + lines)
        .joined(separator: "\n")
    
    let currentPath = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
    let swinjectPath = currentPath.appendingPathComponent(outputPath)
    
    try output.write(to: swinjectPath, atomically: true, encoding: String.Encoding.utf8)
}

print("Generating 💬")


let dependenciesCount = Int(CommandLine.arguments[safe: 1] ?? "20")!
let argumentsCount = Int(CommandLine.arguments[safe: 2] ?? "3")!
let breakCount = Int(CommandLine.arguments[safe: 3] ?? "0")!


let registerLines = (0...dependenciesCount).map { dep in
    (0...argumentsCount).filter{ dep >= $0 }.map { arg -> String in
        registerGenerator(dep, argumentsCount: arg, breakIntoVariables: dep + arg > breakCount)
    }
    }

let registers = registerLines.reduce([]){ $0 + $1}

var autoregistrationOutput = [
    "let maxDependencies = \(dependenciesCount)",
    "let maxArguments = \(argumentsCount)",
    "\n",
    "public extension Container {\n",
        registers.joined(separator: "\n\n"),
    "\n\n}",
]

let resolvers = (0...argumentsCount).map { arg in
    resolverGenerator(arg)
}

let resolverOutput = [
    "extension Resolver {\n\n",
    resolvers.joined(separator: "\n\n"),
    "}\n\n"
]

let checks = (1...dependenciesCount).map { dep in
    checkGenerator(dep)
}

let checksOutput = [checks.joined(separator: "\n\n")]


do {
    try write(to: autoregistrationPath, lines: autoregistrationOutput)
    try write(to: resolverPath, lines: resolverOutput)
    try write(to: checksPath, lines: checksOutput)
    
    print("Done, swinject functions files written at \(autoregistrationPath), \(resolverPath), \(checksPath) 👍")
} catch let e as NSError {
    print("An error occurred while saving the generated functions. Error: \(e)")
}
